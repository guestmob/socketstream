// Generated by CoffeeScript 1.3.3
(function() {
  var RTM, backendError, connectionString, default_cb, getCookie, output, sendHeartbeat, setCookie, setupAPI, start, validLevel,
    __slice = [].slice;

  window.SS = {
    started: null,
    env: null,
    client: {},
    server: {},
    shared: {},
    models: {},
    internal: {
      cb_stack: {}
    },
    config: {
      log: {
        level: 0
      }
    }
  };

  SS.events = {
    _events: {},
    on: function(name, fn) {
      if (this._events[name] == null) {
        this._events[name] = [];
      }
      return this._events[name].push(fn);
    },
    emit: function() {
      var event, name, params, _i, _len, _ref, _results;
      name = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this._events[name]) {
        _ref = this._events[name];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          event = _ref[_i];
          _results.push(event.apply(event, params));
        }
        return _results;
      } else {
        return console.error("Error: Received incoming '" + name + "' event but no event handlers registered");
      }
    }
  };

  connectionString = function() {
    var port;
    port = document.location.port.length === 0 ? document.location.protocol === 'https:' ? 443 : 80 : document.location.port;
    return document.location.protocol + '//' + document.location.hostname + ':' + port;
  };

  SS.socket = io.connect(connectionString());

  default_cb = function(server_response) {
    return console.log(server_response);
  };

  SS.internal.remote = function() {
    var args, cb, last_arg, msg;
    args = Array.prototype.slice.call(arguments);
    last_arg = args[args.length - 1];
    if (typeof last_arg !== 'function') {
      args.push(default_cb);
    }
    msg = {};
    msg.method = args[0];
    if (SS.config.remote_prefix) {
      msg.method = "" + SS.config.remote_prefix + "." + msg.method;
    }
    msg.params = args.length > 1 ? args.slice(1, args.length - 1) : null;
    if (validLevel(4) && !(msg.options && msg.options.silent)) {
      log('<- ' + msg.method);
    }
    cb = args.pop();
    return SS.socket.emit('server', msg, function(data) {
      if (data.error) {
        return backendError(data.error);
      }
      output(2, '-> ' + msg.method, data.result);
      return cb(data.result);
    });
  };

  RTM = (function() {

    function RTM() {}

    RTM.prototype.findById = function(id, cb) {
      return this._send('findById', id, cb);
    };

    RTM.prototype.find = function() {
      var arg, args, cb, _i, _len;
      args = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        args.push(arg);
      }
      cb = args.pop();
      return this._send('find', args, cb);
    };

    RTM.prototype.count = function() {
      var arg, args, cb, _i, _len;
      args = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        args.push(arg);
      }
      cb = args.pop();
      return this._send('count', args, cb);
    };

    RTM.prototype._send = function(action, params, cb) {
      log(2, "<~ " + this.name + "." + action);
      return SS.socket.emit('rtm', {
        rtm: this.name,
        action: action,
        params: params
      }, cb);
    };

    return RTM;

  })();

  /* SYSTEM RESPONDERS
  */


  SS.socket.on('getSessionID', function(data, cb) {
    return cb(getCookie('session_id'));
  });

  SS.socket.on('init', function(msg) {
    var data, name, _i, _len, _ref;
    data = JSON.parse(msg);
    SS.env = data.env;
    SS.config = data.config || {};
    if (data.session_id) {
      setCookie('session_id', data.session_id);
    }
    _ref = data.api.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      SS.models[name] = new RTM;
      SS.models[name].name = name;
    }
    eval('SS.server = ' + data.api.server);
    setupAPI(SS.server, []);
    SS.socket.ready = true;
    if (data.heartbeat) {
      sendHeartbeat();
    }
    return start();
  });

  SS.socket.on('reload', function() {
    if (SS.config.auto_reload) {
      log('Reloading as files have changed...');
      return window.location.reload();
    }
  });

  /*Â MAIN RESPONDERS
  */


  SS.socket.on('event', function(name, params, destination) {
    var info;
    info = destination && (' [' + destination + ']') || '';
    output(2, "=> " + name + info);
    return SS.events.emit(name, params, destination);
  });

  SS.socket.on('rtm', function(msg) {
    var cb, data;
    data = JSON.parse(msg);
    cb = SS.internal.cb_stack[data.id];
    if (cb) {
      output(2, "~> " + cb.msg.rtm + "." + cb.msg.action);
      cb.funkt(data.data);
      return delete SS.internal.cb_stack[data.id];
    }
  });

  /* PRIVATE HELPERS
  */


  start = function() {
    var init;
    if (!SS.started) {
      if (jQuery) {
        jQuery(document).ready(function() {
          var init;
          log("SS hello from jQuery");
          init = SS.client.app.init;
          return init();
        });
      } else {
        init = SS.client.app.init;
        init();
      }
      return SS.started = new Date;
    }
  };

  backendError = function(error) {
    var msg;
    msg = 'SocketStream Server Error: ';
    if (error.code) {
      msg += error.code + ' - ';
    }
    msg += error.message;
    if (error.stack) {
      msg += "\n" + error.stack;
    }
    return console.error(msg);
  };

  output = function(level, msg, params) {
    var o;
    if (validLevel(level)) {
      o = [msg];
      if (params && validLevel(3)) {
        o.push(params);
      }
      return log.apply(log, o);
    }
  };

  validLevel = function(level) {
    return SS.config.log.level >= level;
  };

  setupAPI = function(root, ary) {
    var key, ns, value, _results;
    _results = [];
    for (key in root) {
      value = root[key];
      ns = ary.slice(0);
      ns.push(key);
      if (typeof value === 'object') {
        _results.push(setupAPI(root[key], ns));
      } else {
        _results.push(root[key] = new Function('SS.internal.remote.apply(window, ["' + ns.join('.') + '"].concat(Array.prototype.slice.call(arguments, 0)))'));
      }
    }
    return _results;
  };

  sendHeartbeat = function() {
    if (SS.socket.socket.connected) {
      SS.socket.emit('heartbeat');
    }
    return setTimeout(arguments.callee, SS.config.heartbeat_interval * 1000);
  };

  getCookie = function(c_name) {
    var c_end, c_start;
    if (document.cookie.length > 0) {
      c_start = document.cookie.indexOf(c_name + "=");
      if (c_start !== -1) {
        c_start = c_start + c_name.length + 1;
        c_end = document.cookie.indexOf(";", c_start);
        if (c_end === -1) {
          c_end = document.cookie.length;
        }
        return unescape(document.cookie.substring(c_start, c_end));
      }
    }
    return "";
  };

  setCookie = function(c_name, value, expiredays) {
    var exdate;
    exdate = new Date();
    exdate.setDate(exdate.getDate() + expiredays);
    return document.cookie = ("" + c_name + "=" + (escape(value))) + (expiredays === null ? "" : ";expires=" + exdate.toUTCString());
  };

}).call(this);
